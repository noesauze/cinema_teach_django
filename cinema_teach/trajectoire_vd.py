import cv2
import numpy as np

def detecte_et_trace_trajetoire(chemin_video, trajectoire):
    cap = cv2.VideoCapture(chemin_video)
    if not cap.isOpened():
        print("Erreur lors de l'ouverture de la vid√©o")
        return

    num_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(chemin_video.split('.')[0] + "_trajectoire.mp4", fourcc, 20.0, (frame_width, frame_height))

    for i in range(num_frames):
        ret, frame = cap.read()
        if not ret:
            break

        for point in trajectoire:
            if point[1] < i/30:
                cv2.circle(frame, (int(point[0][1]), int(point[0][0])), 2, (0, 255, 255), -1)

        pts = np.array([[int(p[0][1]), int(p[0][0])] for p in trajectoire if p[1] < i/30 and p[0][0] != 0 and p[0][1] != 0], np.int32)
        pts = pts.reshape((-1, 1, 2))

        cv2.polylines(frame, [pts], False, (0, 255, 255), 2)

        out.write(frame)

    cap.release()
    out.release()

chemin_video = r'C:\Users\Zakariae\Downloads\videotest (1).mp4'
trajectory = [((0.0, 0.0), 0.0), ((0.0, 0.0), 0.03333333333333333), ((0.0, 0.0), 0.06666666666666667), ((0.0, 0.0), 0.1), ((0.0, 0.0), 0.13333333333333333), ((0.0, 0.0), 0.16666666666666666), ((0.0, 0.0), 0.2), ((0.0, 0.0), 0.23333333333333334), ((0.0, 0.0), 0.26666666666666666), ((0.0, 0.0), 0.3), ((0.0, 0.0), 0.3333333333333333), ((0.0, 0.0), 0.36666666666666664), ((0.0, 0.0), 0.4), ((0.0, 0.0), 0.43333333333333335), ((0.0, 0.0), 0.4666666666666667), ((0.0, 0.0), 0.5), ((0.0, 0.0), 0.5333333333333333), ((0.0, 0.0), 0.5666666666666667), ((0.0, 0.0), 0.6), ((0.0, 0.0), 0.6333333333333333), ((0.0, 0.0), 0.6666666666666666), ((0.0, 0.0), 0.7), ((0.0, 0.0), 0.7333333333333333), ((0.0, 0.0), 0.7666666666666667), ((0.0, 0.0), 0.8), ((0.0, 0.0), 0.8333333333333334), ((0.0, 0.0), 0.8666666666666667), ((0.0, 0.0), 0.9), ((0.0, 0.0), 0.9333333333333333), ((0.0, 0.0), 0.9666666666666667), ((0.0, 0.0), 1.0), ((0.0, 0.0), 1.0333333333333334), ((0.0, 0.0), 1.0666666666666667), ((0.0, 0.0), 1.1), ((0.0, 0.0), 1.1333333333333333), ((0.0, 0.0), 1.1666666666666667), ((0.0, 0.0), 1.2), ((0.0, 0.0), 1.2333333333333334), ((0.0, 0.0), 1.2666666666666666), ((0.0, 0.0), 1.3), ((0.0, 0.0), 1.3333333333333333), ((0.0, 0.0), 1.3666666666666667), ((0.0, 0.0), 1.4), ((0.0, 0.0), 1.4333333333333333), ((9.0, 230.0), 1.4666666666666666), ((36.0, 229.0), 1.5), ((74.0, 228.0), 1.5333333333333334), ((120.0, 227.0), 1.5666666666666667), ((174.0, 226.0), 1.6), ((239.0, 227.0), 1.6333333333333333), ((317.0, 228.0), 1.6666666666666667), ((0.0, 0.0), 1.7), ((0.0, 0.0), 1.7333333333333334), ((0.0, 0.0), 1.7666666666666666), ((0.0, 0.0), 1.8), ((0.0, 0.0), 1.8333333333333333), ((0.0, 0.0), 1.8666666666666667), ((0.0, 0.0), 1.9), ((0.0, 0.0), 1.9333333333333333), ((0.0, 0.0), 1.9666666666666666), ((0.0, 0.0), 2.0), ((0.0, 0.0), 2.033333333333333), ((0.0, 0.0), 2.066666666666667), ((0.0, 0.0), 2.1), ((0.0, 0.0), 2.1333333333333333), ((0.0, 0.0), 2.1666666666666665), ((0.0, 0.0), 2.2)]
detecte_et_trace_trajetoire(chemin_video, trajectory)